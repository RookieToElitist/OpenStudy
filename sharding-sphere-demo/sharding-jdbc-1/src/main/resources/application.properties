#*****************以下配置为水平分表***************#

# 让一个实体类对应两张表，不然会报错：
spring.main.allow-bean-definition-overriding=true

##数据分片策略配置##

#配置数据源，给当前数据源起别名
spring.shardingsphere.datasource.names=m1
#数据源具体配置
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
#mysql高版本用com.mysql.cj.jdbc.Driver，
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://47.103.5.233:3306/sharding_sphere_1?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456

#*******注意：本文采取的是sharding-jdbc-spring-boot-starter 4.0.0-RC1版本，新版本中参数规则有出入，如开头是spring.shardingsphere.rules


#指定 course 表(该表代表数据库中的表，仅起个别名而已)分布情况，配置表在哪个数据库里面，表名称都是什么 m1.course_1 , m1.course_2，
# 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}。
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}

# 指定 course 表里面主键 cid 生成策略为 SNOWFLAKE，即主键id不用自己写生成算法了
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE

# 指定分片策略， 约定 cid 值偶数添加到 course_1 表，如果 cid 是奇数添加到 course_2表
spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid % 2 + 1}

# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true
















#
#
## 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#
#spring.shardingsphere.sharding.tables.course.actual-data-nodes=m1.course_$->{1..2}
#
#
## 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
#
## 用于单分片键的标准分片场景：
#    # 分片列名称
#spring.shardingsphere.sharding.tables.course.database-strategy.standard.<sharding-algorithm-name>.sharding-column=cid
#    # 分片算法名称
#spring.shardingsphere.sharding.tables.course.database-strategy.standard.<sharding-algorithm-name>.sharding-algorithm-name=SNOWFLAKE
#
## 用于多分片键的复合分片场景
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-columns= # 分片列名称，多个列以逗号分隔
##spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
#
## 用于Hint 的分片策略
#spring.shardingsphere.sharding.tables.course.database-strategy.hint.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
#
## 分表策略，同分库策略
#spring.shardingsphere.sharding.tables.course.table-strategy.xxx= # 省略
#
## 分布式序列策略配置
#spring.shardingsphere.sharding.tables.course.key-generate-strategy.column= # 分布式序列列名称
#spring.shardingsphere.sharding.tables.course.key-generate-strategy.key-generator-name= # 分布式序列算法名称



#
#
#
## 绑定表规则列表
#spring.shardingsphere.sharding.binding-tables[0]=
## 绑定表规则列表
#spring.shardingsphere.sharding.binding-tables[1]=
## 绑定表规则列表
#spring.shardingsphere.sharding.binding-tables[x]=
#
#spring.shardingsphere.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.sharding.broadcast-tables[x]= # 广播表规则列表
#
#spring.shardingsphere.sharding.default-database-strategy.xxx= # 默认数据库分片策略
#spring.shardingsphere.sharding.default-table-strategy.xxx= # 默认表分片策略
#spring.shardingsphere.sharding.default-key-generate-strategy.xxx= # 默认分布式序列策略
#
## 分片算法配置
#spring.shardingsphere.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
#spring.shardingsphere.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# 分片算法属性配置
#
## 分布式序列算法配置
#spring.shardingsphere.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
#spring.shardingsphere.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置